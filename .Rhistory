?seq
pwd()
start <- as.POSIXct(x = "0:00", format = "%H:%M")
seq(from = start, by = "5 mins", length.out = 288)
timestamp_intervals <- seq(from = as.POSIXct(x = "0:00", format = "%H:%M"), by = "5 mins", length.out = 288)
timestamp_intervals
summary timestamp_intervals
summary(timestamp_intervals)
sapply(timestamp_intervals,substring, 12, 19)
timestamp_intervals(281,)
timestamp_intervals[281,]
timestamp_intervals[281]
as.numeric(timestamp_intervals[281])
read.csv("activity.csv")
act <- read.csv("activity.csv")
View(act)
act$interval[278]
act$interval[278] %% 100
format(act$interval[278] %% 100, 2)
formatC(act$interval[278] %% 100, digits=2)
formatC(act$interval[278] %% 100, digits=2, flag="0")
formatC(act$interval[278] %% 100, digits=1, flag="0")
formatC(act$interval[279] %% 100, digits=1, flag="0")
formatC(act$interval[280] %% 100, digits=1, flag="0")
formatC(act$interval[280] %% 100, width=2, flag="0")
formatC(act$interval[279] %% 100, width=2, flag="0")
floor(act$interval[278]/100)
floor(act$interval[4]/100)
formatC(floor(act$interval[4]/100), width=2, flag="0")
formatC(floor(act$interval[78]/100), width=2, flag="0")
formatC(floor(act$interval[278]/100), width=2, flag="0")
formatC(act$interval[4], width=4, flag="0")
formatC(act$interval[278], width=4, flag="0")
formatC(act$interval[278], width=4, flag="0")[2]
substring(formatC(act$interval[278], width=4, flag="0"),1,2)
substring(formatC(act$interval[278], width=4, flag="0"),3,4)
?paste
paste(substring(formatC(act$interval[278], width=4, flag="0"),1,2),substring(formatC(act$interval[278], width=4, flag="0"),3,4), sep=":")
strptime(paste(substring(formatC(act$interval[278], width=4, flag="0"),1,2),substring(formatC(act$interval[278], width=4, flag="0"),3,4), sep=":"), "%H:%M")
(floor(act$interval[278]/100) * 60) + (act$interval[278] %% 100)
(floor(act$interval[288]/100) * 60) + (act$interval[288] %% 100)
(floor(act$interval[289]/100) * 60) + (act$interval[289] %% 100)
act$continuous_time <- ((floor(act$interval/100) * 60) + (act$interval %% 100))
View(act)
?text
?hist
?plot
activity$continuous_time <- ((floor(activity$interval/100) * 60) + (activity$interval %% 100))
---
title: "Reproducible Research: Peer Assessment 1"
output:
html_document:
keep_md: true
---
## Loading and preprocessing the data
```{r}
activity <- read.csv("activity.csv")
summary(activity)
```
## What is mean total number of steps taken per day?
1. Calculate the total number of steps taken per day
```{r}
steps_per_day <- setNames(aggregate(activity$steps, by=list(activity$date), FUN=sum), c("Days", "TotalSteps"))
head(steps_per_day,10)
```
2. Make a histogram of the total number of steps taken each day
```{r}
hist(steps_per_day$TotalSteps, breaks=10, xlim=c(0,25000))
```
3. Calculate and report the mean and median of the total number of steps taken per day
```{r}
mean_daily_steps <- mean(steps_per_day$TotalSteps[!is.na(steps_per_day$TotalSteps)])
mean_daily_steps
median_daily_steps <- median(steps_per_day$TotalSteps[!is.na(steps_per_day$TotalSteps)])
median_daily_steps
hist(steps_per_day$TotalSteps, breaks=10, xlim=c(0,25000))
abline(v=mean_daily_steps, col = "red", lwd = 1)
text(mean_daily_steps + 2000,20,paste("mean:\n",round(mean_daily_steps, 2),"\n\nmedian:\n",round(median_daily_steps, 2)), col = "red", adj = c(0,0))
```
## What is the average daily activity pattern?
1. Make a time series plot of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
```{r, fig.height=4, fig.width=10}
activity$continuous_time <- ((floor(activity$interval/100) * 60) + (activity$interval %% 100))
par(mfrow=c(1,2))
steps_per_original_interval <- setNames(aggregate(activity$steps[!is.na(activity$steps)], by=list(activity$interval[!is.na(activity$steps)]), FUN=mean), c("Intervals", "AvgSteps"))
plot(steps_per_original_interval$Intervals, steps_per_original_interval$AvgSteps, type="l", main="Average steps per time interval,\noriginal interval", xlab="original time intervals", ylab="Average steps, excluding NAs", xlim=c(0,2500))
steps_per_continuous_interval <- setNames(aggregate(activity$steps[!is.na(activity$steps)], by=list(activity$continuous_time[!is.na(activity$steps)]), FUN=mean), c("Intervals", "AvgSteps"))
plot(steps_per_continuous_interval$Intervals, steps_per_continuous_interval$AvgSteps, type="l", main="Average steps per time interval,\ncorrected interval", xlab="corrected time intervals", ylab="Average steps, excluding NAs", xlim=c(0,1500))
```
*(Note: original data set used intervals that were not continuous.  The original times were just converted straight to numbers, so the intervals jump from 55 to 100, 155 to 200, etc. To plot the intervals correctly so there is no gap between minute "55" and minute "00", the intervals have been converted to the number of minutes after midnight each day.  The "continuous_time" column thus has a continuous sequence of numbers from 0 to 1435 each day.)*
2. Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
```{r}
steps_per_original_interval[which.max(steps_per_original_interval$AvgSteps),]
```
## Imputing missing values
1. Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
```{r}
nrow(activity[is.na(activity$steps),])
```
2. Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
3. Create a new dataset that is equal to the original dataset but with the missing data filled in.
```{r}
imputed_activity <- activity
imputed_activity$steps[is.na(imputed_activity$steps)] <- steps_per_original_interval$AvgSteps[steps_per_original_interval$Intervals==imputed_activity$interval]
head(imputed_activity,50)
```
4. Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
## Are there differences in activity patterns between weekdays and weekends?
1. Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
2. Make a panel plot containing a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all weekday days or weekend days (y-axis). See the README file in the GitHub repository to see an example of what this plot should look like using simulated data.
View(imputed_activity)
View(activity)
View(steps_per_original_interval)
?merge
imputed_activity <- merge(activity, steps_per_original_interval, by.x = "interval", by.y = "Intervals")
summary(imputed_activity)
View(imputed_activity)
imputed_activity$steps[is.na(imputed_activity$steps)] <- imputed_activity$AvgSteps
imputed_activity$steps[is.na(imputed_activity$steps)] <- imputed_activity$AvgSteps[is.na(imputed_activity$steps)]
View(imputed_activity)
imputed_activity <- merge(activity, steps_per_original_interval, by.x = "interval", by.y = "Intervals")
View(imputed_activity)
imputed_activity$steps[is.na(imputed_activity$steps)] <- imputed_activity$AvgSteps[is.na(imputed_activity$steps)]
View(imputed_activity)
summary(imputed_activity)
?weekdays
weekdays(activity$date[1])
weekdays(as.Date(activity$date[1],"%Y-%m-%d"))
weekdays(as.Date(activity$date[1],"%Y-%m-%d")) %in% c('Saturday','Sunday'))
weekdays(as.Date(activity$date[1],"%Y-%m-%d")) %in% c('Saturday','Sunday')
weekdays(as.Date(activity$date[6],"%Y-%m-%d")) %in% c('Saturday','Sunday')
weekdays(as.Date(activity$date[4000],"%Y-%m-%d")) %in% c('Saturday','Sunday')
!weekdays(as.Date(activity$date[1],"%Y-%m-%d")) %in% c('Saturday','Sunday')
imputed_activity[weekdays(as.Date(activity$date,"%Y-%m-%d")) %in% c("Saturday","Sunday")]
imputed_activity[weekdays(as.Date(activity$date,"%Y-%m-%d")) %in% c("Saturday","Sunday"),]
imputed_activity[weekdays(as.Date(activity$date,"%Y-%m-%d")) %in% c("Saturday","Sunday"),]
imputed_activity$weekend[weekdays(as.Date(imputed_activity$date,"%Y-%m-%d")) %in% c("Saturday","Sunday")] <- "weekend"
summary(imputed_activity)
View(imputed_activity)
imputed_activity$weekend[is.na(imputed_activity$weekend)] <- "weekday"
summary(imputed_activity)
View(imputed_activity)
imputed_activity$weekend <- factor(imputed_activity$weekend)
View(imputed_activity)
steps_per_interval_weekend <- setNames(aggregate(imputed_activity$steps[imputed_activity$is_weekend == "weekend"], by=list(imputed_activity$continuous_time[imputed_activity$is_weekend == "weekend"]), FUN=mean), c("Intervals", "AvgSteps"))
View(imputed_activity)
imputed_activity$steps[imputed_activity$is_weekend == "weekend"]
imputed_activity$is_weekend[weekdays(as.Date(imputed_activity$date,"%Y-%m-%d")) %in% c("Saturday","Sunday")] <- "weekend"
imputed_activity$is_weekend[is.na(imputed_activity$is_weekend)] <- "weekday"
imputed_activity$is_weekend <- factor(imputed_activity$is_weekend)
str(imputed_activity)
imputed_activity$steps[imputed_activity$is_weekend == "weekend"]
aggregate(imputed_activity$steps[imputed_activity$is_weekend == "weekend"], by=list(imputed_activity$continuous_time[imputed_activity$is_weekend == "weekend"]), FUN=mean), c("Intervals", "AvgSteps"
aggregate(imputed_activity$steps[imputed_activity$is_weekend == "weekend"], by=list(imputed_activity$continuous_time[imputed_activity$is_weekend == "weekend"]), FUN=mean)
steps_per_interval_weekend <- setNames(aggregate(imputed_activity$steps[imputed_activity$is_weekend == "weekend"], by=list(imputed_activity$continuous_time[imputed_activity$is_weekend == "weekend"]), FUN=mean), c("Intervals", "AvgSteps"))
View(steps_per_interval_weekend)
